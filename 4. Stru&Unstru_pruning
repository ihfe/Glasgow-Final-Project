{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"L4","collapsed_sections":["OjRQ0sbWA2WC"],"authorship_tag":"ABX9TyP9r+3cGPS2D6hE73Yo+Tnk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["### 📌 1.Load model and Dataset"],"metadata":{"id":"pD6rhQx3nyf4"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchvision import models\n","from torch.utils.data import DataLoader\n","from google.colab import drive\n","drive.mount('/content/drive')\n","model = models.vgg11(pretrained=False)\n","model.classifier[6] = nn.Linear(4096, 10)\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","model = model.to(device)\n","model.load_state_dict(torch.load(\"/content/drive/MyDrive/第二次尝试/VGG11_C10_layer_sensitivity.pth\", map_location=torch.device('cpu')))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t33Z2iYJlxA5","executionInfo":{"status":"ok","timestamp":1756115573410,"user_tz":-60,"elapsed":58819,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"8f476794-db19-4407-f50c-97579652beaa"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.12/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]},{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# 数据预处理（VGG 使用 ImageNet 预训练，因此需归一化到 ImageNet 均值）\n","transform_train = transforms.Compose([\n","    transforms.Resize(224),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                         std=[0.229, 0.224, 0.225])\n","])\n","transform_test = transforms.Compose([\n","    transforms.Resize(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                         std=[0.229, 0.224, 0.225])\n","])\n","\n","# 加载 CIFAR-10 数据集\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)\n","\n","trainloader = DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)\n","testloader = DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)\n"],"metadata":{"id":"QJMhh_Lwl1wV","executionInfo":{"status":"ok","timestamp":1756115575026,"user_tz":-60,"elapsed":1618,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# 准确率评估函数\n","def evaluate(model):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for inputs, labels in testloader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            outputs = model(inputs)\n","            _, predicted = torch.max(outputs, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","    return 100 * correct / total"],"metadata":{"id":"COOsX-B-lw2E","executionInfo":{"status":"ok","timestamp":1756115575031,"user_tz":-60,"elapsed":2,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["print(evaluate(model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3euNMIOQn6cZ","executionInfo":{"status":"ok","timestamp":1756115642200,"user_tz":-60,"elapsed":15362,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"14bbf45c-8e0e-46c5-c5bc-2f19ba026cb2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["91.31\n"]}]},{"cell_type":"markdown","source":["### 2. 📌Start Unstructured prune"],"metadata":{"id":"FUb_CfRfn4t1"}},{"cell_type":"code","source":["conv_layers = [(name, m) for name, m in model.features.named_modules() if isinstance(m, nn.Conv2d)]\n","layer_names = [name for name, _ in conv_layers]\n","conv_layers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pBPTArdklwvS","executionInfo":{"status":"ok","timestamp":1756115714759,"user_tz":-60,"elapsed":25,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"9427989c-7d62-4ce6-8393-06e052cca34b"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('0', Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('3', Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('6', Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('8', Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('11', Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('13', Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('16', Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))),\n"," ('18', Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)))]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#Utilize the layer sensitivity we get before\n","prune_rate = [0.1,0.4,0.5,0.5,0.6,0.6,0.5,0.7]"],"metadata":{"id":"PgOScOFClwn8","executionInfo":{"status":"ok","timestamp":1756116079891,"user_tz":-60,"elapsed":98,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["for (name, layer), amt in zip(conv_layers, prune_rate):\n","    prune.l1_unstructured(layer, name='weight', amount=amt)\n","    prune.remove(layer,\"weight\")"],"metadata":{"id":"j2235gmWlwhL","executionInfo":{"status":"ok","timestamp":1756117332654,"user_tz":-60,"elapsed":36,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["#稀疏度计算\n","def calculate_model_sparsity(model):\n","    total_params = 0\n","    zero_params = 0\n","\n","    for name, param in model.named_parameters():\n","        if \"weight\" in name and param.requires_grad:\n","            num_params = param.numel()\n","            num_zeros = torch.sum(param == 0).item()\n","            total_params += num_params\n","            zero_params += num_zeros\n","            layer_sparsity = 100.0 * num_zeros / num_params\n","            print(f\"{name:40} | Sparsity: {layer_sparsity:.2f}% ({num_zeros}/{num_params})\")\n","\n","    total_sparsity = 100.0 * zero_params / total_params\n","    print(f\"\\n🔍 Total model sparsity: {total_sparsity:.2f}% ({zero_params}/{total_params})\")\n","\n","    return total_sparsity\n","# 假设你有一个剪枝后的模型\n","sparsity = calculate_model_sparsity(model)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"reF40czVlwGF","executionInfo":{"status":"ok","timestamp":1756117337650,"user_tz":-60,"elapsed":15,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"c8bf7a3d-c5eb-41f6-ba87-8b97ab7dea5b"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["features.0.weight                        | Sparsity: 19.04% (329/1728)\n","features.3.weight                        | Sparsity: 64.00% (47186/73728)\n","features.6.weight                        | Sparsity: 75.00% (221184/294912)\n","features.8.weight                        | Sparsity: 75.00% (442368/589824)\n","features.11.weight                       | Sparsity: 84.00% (990904/1179648)\n","features.13.weight                       | Sparsity: 84.00% (1981809/2359296)\n","features.16.weight                       | Sparsity: 75.00% (1769472/2359296)\n","features.18.weight                       | Sparsity: 91.00% (2146959/2359296)\n","classifier.0.weight                      | Sparsity: 0.00% (0/102760448)\n","classifier.3.weight                      | Sparsity: 0.00% (0/16777216)\n","classifier.6.weight                      | Sparsity: 0.00% (0/40960)\n","\n","🔍 Total model sparsity: 5.90% (7600211/128796352)\n"]}]},{"cell_type":"code","source":["print(evaluate(model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oOfpZ5rblv9w","executionInfo":{"status":"ok","timestamp":1756117389572,"user_tz":-60,"elapsed":15279,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"543de04d-6ea9-4179-ab19-fb05f8fdbe12"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["45.74\n"]}]},{"cell_type":"markdown","source":["##### 2.1 Fine-tunning"],"metadata":{"id":"dLWcFESkyCTA"}},{"cell_type":"code","source":["\n","model_finetunning = deepcopy(model)\n","model_finetunning = model_finetunning.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model_finetunning.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model_finetunning.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(5):  # 可根据需要改epoch数\n","    model_finetunning.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model_finetunning(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Training\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"I9PQLXxflv0o","executionInfo":{"status":"ok","timestamp":1756117953230,"user_tz":-60,"elapsed":533160,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"57279629-3418-48fc-c013-a20be148a765"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["[Epoch 1, Batch 100] loss: 0.499\n","[Epoch 1, Batch 200] loss: 0.363\n","[Epoch 1, Batch 300] loss: 0.337\n","[Epoch 1, Batch 400] loss: 0.341\n","[Epoch 1, Batch 500] loss: 0.334\n","[Epoch 1, Batch 600] loss: 0.318\n","[Epoch 1, Batch 700] loss: 0.317\n","[Epoch 2, Batch 100] loss: 0.253\n","[Epoch 2, Batch 200] loss: 0.248\n","[Epoch 2, Batch 300] loss: 0.268\n","[Epoch 2, Batch 400] loss: 0.256\n","[Epoch 2, Batch 500] loss: 0.234\n","[Epoch 2, Batch 600] loss: 0.248\n","[Epoch 2, Batch 700] loss: 0.245\n","[Epoch 3, Batch 100] loss: 0.197\n","[Epoch 3, Batch 200] loss: 0.207\n","[Epoch 3, Batch 300] loss: 0.203\n","[Epoch 3, Batch 400] loss: 0.210\n","[Epoch 3, Batch 500] loss: 0.222\n","[Epoch 3, Batch 600] loss: 0.208\n","[Epoch 3, Batch 700] loss: 0.213\n","[Epoch 4, Batch 100] loss: 0.172\n","[Epoch 4, Batch 200] loss: 0.171\n","[Epoch 4, Batch 300] loss: 0.159\n","[Epoch 4, Batch 400] loss: 0.187\n","[Epoch 4, Batch 500] loss: 0.173\n","[Epoch 4, Batch 600] loss: 0.193\n","[Epoch 4, Batch 700] loss: 0.174\n","[Epoch 5, Batch 100] loss: 0.165\n","[Epoch 5, Batch 200] loss: 0.141\n","[Epoch 5, Batch 300] loss: 0.161\n","[Epoch 5, Batch 400] loss: 0.156\n","[Epoch 5, Batch 500] loss: 0.149\n","[Epoch 5, Batch 600] loss: 0.156\n","[Epoch 5, Batch 700] loss: 0.164\n","Finished Training\n"]}]},{"cell_type":"code","source":["print(evaluate(model_finetunning))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rZm8V_uiwa1W","executionInfo":{"status":"ok","timestamp":1756118011075,"user_tz":-60,"elapsed":15529,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"8e384ebb-ef0e-4f2b-d1dd-9f0ba9b92e83"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["90.06\n"]}]},{"cell_type":"code","source":["#calculate Sparsity\n","sparsity = calculate_model_sparsity(model_finetunning)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AUzzdvpcwbLy","executionInfo":{"status":"ok","timestamp":1756118355066,"user_tz":-60,"elapsed":23,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"f69bf2c9-b585-40ed-f0d7-2060bf1e36f0"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["features.0.weight                        | Sparsity: 19.04% (329/1728)\n","features.3.weight                        | Sparsity: 64.00% (47186/73728)\n","features.6.weight                        | Sparsity: 75.00% (221184/294912)\n","features.8.weight                        | Sparsity: 75.00% (442368/589824)\n","features.11.weight                       | Sparsity: 84.00% (990904/1179648)\n","features.13.weight                       | Sparsity: 84.00% (1981809/2359296)\n","features.16.weight                       | Sparsity: 75.00% (1769472/2359296)\n","features.18.weight                       | Sparsity: 91.00% (2146959/2359296)\n","classifier.0.weight                      | Sparsity: 0.00% (0/102760448)\n","classifier.3.weight                      | Sparsity: 0.00% (0/16777216)\n","classifier.6.weight                      | Sparsity: 0.00% (0/40960)\n","\n","🔍 Total model sparsity: 5.90% (7600211/128796352)\n"]}]},{"cell_type":"markdown","source":["### 3. 📌Start Structured prune"],"metadata":{"id":"IoURe6C5xSRh"}},{"cell_type":"code","source":["model = models.vgg11(pretrained=False)\n","model.classifier[6] = nn.Linear(4096, 10)\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model = model.to(device)\n","model.load_state_dict(torch.load(\"/content/drive/MyDrive/第二次尝试/VGG11_C10_layer_sensitivity.pth\", map_location=torch.device('cpu')))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PYzIztjw0Mk3","executionInfo":{"status":"ok","timestamp":1756122178230,"user_tz":-60,"elapsed":2447,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"bac7902b-5d1b-4ee5-ac85-a5bf8ef87057"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["prune_rates = [0.1, 0.4, 0.5, 0.5, 0.6, 0.6, 0.5, 0.7]\n","conv_idx = 0\n","for name, module in model.named_modules():\n","    if isinstance(module, nn.Conv2d):\n","        rate = prune_rates[conv_idx]\n","        prune.ln_structured(module, name='weight', amount=rate, n=2, dim=0)\n","        prune.remove(module, 'weight')\n","        print(f\"Pruned {name} with rate {rate}\")\n","        conv_idx += 1\n","        if conv_idx >= len(prune_rates):\n","            break  # 避免下标越界"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KxLU_RqwwbdK","executionInfo":{"status":"ok","timestamp":1756122178289,"user_tz":-60,"elapsed":61,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"4b0b5d67-c547-4e34-e75a-d2a9c793e992"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Pruned features.0 with rate 0.1\n","Pruned features.3 with rate 0.4\n","Pruned features.6 with rate 0.5\n","Pruned features.8 with rate 0.5\n","Pruned features.11 with rate 0.6\n","Pruned features.13 with rate 0.6\n","Pruned features.16 with rate 0.5\n","Pruned features.18 with rate 0.7\n"]}]},{"cell_type":"code","source":["print(evaluate(model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BqznWAu8wbh7","executionInfo":{"status":"ok","timestamp":1756120845938,"user_tz":-60,"elapsed":174741,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"49c301b3-397d-4d7f-d29c-1273450c16c1"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["10.0\n"]}]},{"cell_type":"code","source":["model_finetunning = deepcopy(model)\n","model_finetunning = model_finetunning.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model_finetunning.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model_finetunning.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(3):  # 可根据需要改epoch数\n","    model_finetunning.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model_finetunning(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Re-Training\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtIk_VGu2YPH","executionInfo":{"status":"ok","timestamp":1756122498542,"user_tz":-60,"elapsed":319928,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"46b5e363-417c-4ea7-ed2a-2b7b05e37113"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["[Epoch 1, Batch 100] loss: 2.647\n","[Epoch 1, Batch 200] loss: 2.305\n","[Epoch 1, Batch 300] loss: 2.301\n","[Epoch 1, Batch 400] loss: 2.290\n","[Epoch 1, Batch 500] loss: 2.269\n","[Epoch 1, Batch 600] loss: 2.246\n","[Epoch 1, Batch 700] loss: 2.249\n","[Epoch 2, Batch 100] loss: 2.213\n","[Epoch 2, Batch 200] loss: 2.212\n","[Epoch 2, Batch 300] loss: 2.207\n","[Epoch 2, Batch 400] loss: 2.207\n","[Epoch 2, Batch 500] loss: 2.193\n","[Epoch 2, Batch 600] loss: 2.187\n","[Epoch 2, Batch 700] loss: 2.187\n","[Epoch 3, Batch 100] loss: 2.176\n","[Epoch 3, Batch 200] loss: 2.161\n","[Epoch 3, Batch 300] loss: 2.153\n","[Epoch 3, Batch 400] loss: 2.187\n","[Epoch 3, Batch 500] loss: 2.174\n","[Epoch 3, Batch 600] loss: 2.162\n","[Epoch 3, Batch 700] loss: 2.160\n","Finished Re-Training\n"]}]},{"cell_type":"code","source":["#稀疏度计算\n","def calculate_model_sparsity(model):\n","    total_params = 0\n","    zero_params = 0\n","\n","    for name, param in model.named_parameters():\n","        if \"weight\" in name:\n","            num_params = param.numel()\n","            num_zeros = torch.sum(param == 0).item()\n","            total_params += num_params\n","            zero_params += num_zeros\n","            layer_sparsity = 100.0 * num_zeros / num_params\n","            print(f\"{name:40} | Sparsity: {layer_sparsity:.2f}% ({num_zeros}/{num_params})\")\n","\n","    total_sparsity = 100.0 * zero_params / total_params\n","    print(f\"\\n🔍 Total model sparsity: {total_sparsity:.2f}% ({zero_params}/{total_params})\")\n","\n","    return total_sparsity\n","# 假设你有一个剪枝后的模型\n","sparsity = calculate_model_sparsity(model_finetunning)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zQD-iUXewbms","executionInfo":{"status":"ok","timestamp":1756124906261,"user_tz":-60,"elapsed":106,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"c4b04ad2-ef50-4c1e-bced-520906f28824"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["features.0.weight                        | Sparsity: 9.38% (162/1728)\n","features.3.weight                        | Sparsity: 39.84% (29376/73728)\n","features.6.weight                        | Sparsity: 50.00% (147456/294912)\n","features.8.weight                        | Sparsity: 50.00% (294912/589824)\n","features.11.weight                       | Sparsity: 59.96% (707328/1179648)\n","features.13.weight                       | Sparsity: 59.96% (1414656/2359296)\n","features.16.weight                       | Sparsity: 50.00% (1179648/2359296)\n","features.18.weight                       | Sparsity: 69.92% (1649664/2359296)\n","classifier.0.weight                      | Sparsity: 0.00% (0/102760448)\n","classifier.3.weight                      | Sparsity: 0.00% (0/16777216)\n","classifier.6.weight                      | Sparsity: 0.00% (0/40960)\n","\n","🔍 Total model sparsity: 4.21% (5423202/128796352)\n"]}]},{"cell_type":"code","source":["print(evaluate(model_finetunning))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3cFdXi52E7f","executionInfo":{"status":"ok","timestamp":1756122514112,"user_tz":-60,"elapsed":15534,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"ef7b3b46-9fe2-499a-a831-7e952cdb10af"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["21.15\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"qpGzRvU_2FZ8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4. 📌Just ignore the following code【for personal use】"],"metadata":{"id":"OjRQ0sbWA2WC"}},{"cell_type":"code","source":[],"metadata":{"id":"W24dxrVTwbqo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torchvision import models\n","import torch\n","import torch.nn as nn\n","import torch.nn.utils.prune as prune\n","from copy import deepcopy\n","from torchvision import datasets, transforms\n","from torch.utils.data import DataLoader\n","import torch.optim as optim\n","\n","# from google.colab import drive\n","# drive.mount('/content/drive')"],"metadata":{"id":"pz8UcLgFEHVk","executionInfo":{"status":"ok","timestamp":1756113255355,"user_tz":-60,"elapsed":10485,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["import torchvision\n","import torchvision.transforms as transforms\n","\n","# 数据预处理：resize 和 normalization\n","transform = transforms.Compose([\n","    transforms.Resize(224),  # 因为 VGG 输入是 224x224\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","])\n","\n","# 加载训练集\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n","trainloader = DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)\n","\n","# 加载测试集\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n","testloader = DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)"],"metadata":{"id":"DmHy67D5EHOm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1756113273166,"user_tz":-60,"elapsed":17806,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"2380f48a-7a2d-42fa-e974-25cfc674a616"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 170M/170M [00:13<00:00, 12.9MB/s]\n"]}]},{"cell_type":"code","source":["# 设置设备\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oUxY8dieOyEK","executionInfo":{"status":"ok","timestamp":1756113273209,"user_tz":-60,"elapsed":22,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"1b9e75a5-00bc-4e5b-c521-a233267f3382"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}]},{"cell_type":"code","source":["# -----------------------\n","# 2. 加载并修改预训练模型\n","# -----------------------\n","model = models.vgg11(pretrained=True)\n","\n","# 替换最后一层：1000 -> 10\n","model.classifier[6] = nn.Linear(4096, 10)\n","\n","# 将模型放到 GPU（如有）\n","model = model.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(5):  # 可根据需要改epoch数\n","    model.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Training\")"],"metadata":{"id":"reP3BJInEHJs","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1756113836691,"user_tz":-60,"elapsed":538879,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"0dede7c4-8b74-4372-a213-be5498fae00c"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[Epoch 1, Batch 100] loss: 1.010\n","[Epoch 1, Batch 200] loss: 0.671\n","[Epoch 1, Batch 300] loss: 0.580\n","[Epoch 1, Batch 400] loss: 0.548\n","[Epoch 1, Batch 500] loss: 0.485\n","[Epoch 1, Batch 600] loss: 0.462\n","[Epoch 1, Batch 700] loss: 0.463\n","[Epoch 2, Batch 100] loss: 0.275\n","[Epoch 2, Batch 200] loss: 0.254\n","[Epoch 2, Batch 300] loss: 0.279\n","[Epoch 2, Batch 400] loss: 0.256\n","[Epoch 2, Batch 500] loss: 0.283\n","[Epoch 2, Batch 600] loss: 0.274\n","[Epoch 2, Batch 700] loss: 0.281\n","[Epoch 3, Batch 100] loss: 0.138\n","[Epoch 3, Batch 200] loss: 0.115\n","[Epoch 3, Batch 300] loss: 0.126\n","[Epoch 3, Batch 400] loss: 0.124\n","[Epoch 3, Batch 500] loss: 0.122\n","[Epoch 3, Batch 600] loss: 0.132\n","[Epoch 3, Batch 700] loss: 0.134\n","[Epoch 4, Batch 100] loss: 0.061\n","[Epoch 4, Batch 200] loss: 0.061\n","[Epoch 4, Batch 300] loss: 0.067\n","[Epoch 4, Batch 400] loss: 0.076\n","[Epoch 4, Batch 500] loss: 0.077\n","[Epoch 4, Batch 600] loss: 0.080\n","[Epoch 4, Batch 700] loss: 0.085\n","[Epoch 5, Batch 100] loss: 0.047\n","[Epoch 5, Batch 200] loss: 0.043\n","[Epoch 5, Batch 300] loss: 0.046\n","[Epoch 5, Batch 400] loss: 0.056\n","[Epoch 5, Batch 500] loss: 0.058\n","[Epoch 5, Batch 600] loss: 0.048\n","[Epoch 5, Batch 700] loss: 0.056\n","Finished Training\n"]}]},{"cell_type":"code","source":["# -----------------------\n","# 5. 模型测试\n","# -----------------------\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for inputs, labels in testloader:\n","        inputs, labels = inputs.to(device), labels.to(device)\n","        outputs = model(inputs)\n","        _, predicted = torch.max(outputs, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print(f\"Accuracy on test set: {100 * correct / total:.2f}%\")"],"metadata":{"id":"X_EM5wixEHHK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1756113917585,"user_tz":-60,"elapsed":15688,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"a60f759a-31e1-4df5-9c8f-806e3d1a2e81"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test set: 85.79%\n"]}]},{"cell_type":"code","source":["# 准确率评估函数\n","def evaluate(model):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for inputs, labels in testloader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            outputs = model(inputs)\n","            _, predicted = torch.max(outputs, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","    return 100 * correct / total\n","print(evaluate(model))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yab5dhFIjAWK","executionInfo":{"status":"ok","timestamp":1756113965006,"user_tz":-60,"elapsed":15616,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"39fa9a70-8911-479d-b2a5-9492a1d5d764"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["85.79\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 定义保存路径\n","save_path = \"/content/drive/MyDrive/模型/VGG11_CIFAR.pth\"\n","# 保存模型参数\n","torch.save(model.state_dict(), save_path)"],"metadata":{"id":"91Iqjm7MEHDs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753274901942,"user_tz":-60,"elapsed":45697,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"9c1d87a1-364d-49b7-88d0-43fdee71a63a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"HdUPTIgzEG90"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# -----------------------\n","# 2. 加载并修改预训练模型\n","# -----------------------\n","model = models.vgg13(pretrained=True)\n","\n","# 替换最后一层：1000 -> 10\n","model.classifier[6] = nn.Linear(4096, 10)\n","\n","# 将模型放到 GPU（如有）\n","model = model.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(10):  # 可根据需要改epoch数\n","    model.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Training\")"],"metadata":{"id":"PFAqs1lWEG2E","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753361520136,"user_tz":-60,"elapsed":437552,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"8cd88be2-d29f-48d2-e54d-be33a32bc1e1","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG13_Weights.IMAGENET1K_V1`. You can also use `weights=VGG13_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/vgg13-19584684.pth\" to /root/.cache/torch/hub/checkpoints/vgg13-19584684.pth\n","100%|██████████| 508M/508M [00:02<00:00, 224MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["[Epoch 1, Batch 100] loss: 1.012\n","[Epoch 1, Batch 200] loss: 0.675\n","[Epoch 1, Batch 300] loss: 0.567\n","[Epoch 1, Batch 400] loss: 0.539\n","[Epoch 1, Batch 500] loss: 0.495\n","[Epoch 1, Batch 600] loss: 0.512\n","[Epoch 1, Batch 700] loss: 0.479\n","[Epoch 2, Batch 100] loss: 0.265\n","[Epoch 2, Batch 200] loss: 0.256\n","[Epoch 2, Batch 300] loss: 0.272\n","[Epoch 2, Batch 400] loss: 0.269\n","[Epoch 2, Batch 500] loss: 0.260\n","[Epoch 2, Batch 600] loss: 0.265\n","[Epoch 2, Batch 700] loss: 0.264\n","[Epoch 3, Batch 100] loss: 0.112\n","[Epoch 3, Batch 200] loss: 0.108\n","[Epoch 3, Batch 300] loss: 0.109\n","[Epoch 3, Batch 400] loss: 0.125\n","[Epoch 3, Batch 500] loss: 0.127\n","[Epoch 3, Batch 600] loss: 0.121\n","[Epoch 3, Batch 700] loss: 0.135\n","[Epoch 4, Batch 100] loss: 0.058\n","[Epoch 4, Batch 200] loss: 0.058\n","[Epoch 4, Batch 300] loss: 0.057\n","[Epoch 4, Batch 400] loss: 0.054\n","[Epoch 4, Batch 500] loss: 0.052\n","[Epoch 4, Batch 600] loss: 0.068\n","[Epoch 4, Batch 700] loss: 0.073\n","[Epoch 5, Batch 100] loss: 0.045\n","[Epoch 5, Batch 200] loss: 0.041\n","[Epoch 5, Batch 300] loss: 0.041\n","[Epoch 5, Batch 400] loss: 0.051\n","[Epoch 5, Batch 500] loss: 0.047\n","[Epoch 5, Batch 600] loss: 0.054\n","[Epoch 5, Batch 700] loss: 0.049\n","[Epoch 6, Batch 100] loss: 0.036\n","[Epoch 6, Batch 200] loss: 0.036\n","[Epoch 6, Batch 300] loss: 0.035\n","[Epoch 6, Batch 400] loss: 0.049\n","[Epoch 6, Batch 500] loss: 0.051\n","[Epoch 6, Batch 600] loss: 0.048\n","[Epoch 6, Batch 700] loss: 0.058\n","[Epoch 7, Batch 100] loss: 0.025\n","[Epoch 7, Batch 200] loss: 0.032\n","[Epoch 7, Batch 300] loss: 0.043\n","[Epoch 7, Batch 400] loss: 0.035\n","[Epoch 7, Batch 500] loss: 0.033\n","[Epoch 7, Batch 600] loss: 0.039\n","[Epoch 7, Batch 700] loss: 0.034\n","[Epoch 8, Batch 100] loss: 0.034\n","[Epoch 8, Batch 200] loss: 0.030\n","[Epoch 8, Batch 300] loss: 0.031\n","[Epoch 8, Batch 400] loss: 0.028\n","[Epoch 8, Batch 500] loss: 0.037\n","[Epoch 8, Batch 600] loss: 0.040\n","[Epoch 8, Batch 700] loss: 0.035\n","[Epoch 9, Batch 100] loss: 0.042\n","[Epoch 9, Batch 200] loss: 0.028\n","[Epoch 9, Batch 300] loss: 0.030\n","[Epoch 9, Batch 400] loss: 0.044\n","[Epoch 9, Batch 500] loss: 0.043\n","[Epoch 9, Batch 600] loss: 0.037\n","[Epoch 9, Batch 700] loss: 0.036\n","[Epoch 10, Batch 100] loss: 0.026\n","[Epoch 10, Batch 200] loss: 0.031\n","[Epoch 10, Batch 300] loss: 0.028\n","[Epoch 10, Batch 400] loss: 0.027\n","[Epoch 10, Batch 500] loss: 0.024\n","[Epoch 10, Batch 600] loss: 0.037\n","[Epoch 10, Batch 700] loss: 0.034\n","Finished Training\n"]}]},{"cell_type":"code","source":["# -----------------------\n","# 5. 模型测试\n","# -----------------------\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for inputs, labels in testloader:\n","        inputs, labels = inputs.to(device), labels.to(device)\n","        outputs = model(inputs)\n","        _, predicted = torch.max(outputs, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print(f\"Accuracy on test set: {100 * correct / total:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrT4AzQsT1xa","executionInfo":{"status":"ok","timestamp":1753361528943,"user_tz":-60,"elapsed":8803,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"c2d62629-3a2e-4f2a-f966-0e834d8217ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test set: 86.91%\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 定义保存路径\n","save_path = \"/content/drive/MyDrive/模型/VGG13_CIFAR.pth\"\n","# 保存模型参数\n","torch.save(model.state_dict(), save_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N3OZjsPiUK_i","executionInfo":{"status":"ok","timestamp":1753361638509,"user_tz":-60,"elapsed":109565,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"d11cefb1-6e01-49a3-e33a-018f0ac62196"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZHt34BueUOhK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# -----------------------\n","# 2. 加载并修改预训练模型\n","# -----------------------\n","model = models.vgg16(pretrained=True)\n","\n","# 替换最后一层：1000 -> 10\n","model.classifier[6] = nn.Linear(4096, 10)\n","\n","# 将模型放到 GPU（如有）\n","model = model.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(10):  # 可根据需要改epoch数\n","    model.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Training\")"],"metadata":{"id":"IkbEZwGDUQVT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# -----------------------\n","# 5. 模型测试\n","# -----------------------\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for inputs, labels in testloader:\n","        inputs, labels = inputs.to(device), labels.to(device)\n","        outputs = model(inputs)\n","        _, predicted = torch.max(outputs, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print(f\"Accuracy on test set: {100 * correct / total:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5E6Qz6sbUXRb","executionInfo":{"status":"ok","timestamp":1753362126650,"user_tz":-60,"elapsed":8701,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"6e15de3b-4617-4b5e-97d3-147ab4ef88de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test set: 86.57%\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 定义保存路径\n","save_path = \"/content/drive/MyDrive/模型/VGG16_CIFAR.pth\"\n","# 保存模型参数\n","torch.save(model.state_dict(), save_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dHOFcffvUVsW","executionInfo":{"status":"ok","timestamp":1753362129108,"user_tz":-60,"elapsed":2445,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"a179c869-d129-45e2-8621-cc3bc9539270"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"-Gj0e9F9f4wl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# -----------------------\n","# 2. 加载并修改预训练模型\n","# -----------------------\n","model = models.vgg19(pretrained=True)\n","\n","# 替换最后一层：1000 -> 10\n","model.classifier[6] = nn.Linear(4096, 10)\n","\n","# 将模型放到 GPU（如有）\n","model = model.to(device)\n","\n","# 可选：冻结特征提取部分\n","for param in model.features.parameters():\n","    param.requires_grad = False\n","\n","# -----------------------\n","# 3. 定义损失和优化器\n","# -----------------------\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","\n","# -----------------------\n","# 4. 模型训练\n","# -----------------------\n","for epoch in range(10):  # 可根据需要改epoch数\n","    model.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(trainloader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        if i % 100 == 99:  # 每100个mini-batch打印一次loss\n","            print(f\"[Epoch {epoch+1}, Batch {i+1}] loss: {running_loss/100:.3f}\")\n","            running_loss = 0.0\n","\n","print(\"Finished Training\")"],"metadata":{"id":"-aV8-mvIh3EL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# -----------------------\n","# 5. 模型测试\n","# -----------------------\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for inputs, labels in testloader:\n","        inputs, labels = inputs.to(device), labels.to(device)\n","        outputs = model(inputs)\n","        _, predicted = torch.max(outputs, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print(f\"Accuracy on test set: {100 * correct / total:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cGyWFFfPh4U-","executionInfo":{"status":"ok","timestamp":1753362772488,"user_tz":-60,"elapsed":9214,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"a1e9cd61-884d-47da-c4f4-96dd149bebe7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy on test set: 87.07%\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# 定义保存路径\n","save_path = \"/content/drive/MyDrive/模型/VGG19_CIFAR.pth\"\n","# 保存模型参数\n","torch.save(model.state_dict(), save_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f7Fgfoe3h8q2","executionInfo":{"status":"ok","timestamp":1753362774841,"user_tz":-60,"elapsed":2350,"user":{"displayName":"ZHE YUAN","userId":"10416376004896786598"}},"outputId":"132f891d-3ab8-4ce6-ae0a-26b3765f9635"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"obscbtUDkI8Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"meyO6PQXmEtv"},"execution_count":null,"outputs":[]}]}